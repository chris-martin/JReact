


package org.jreact.adapt.gwt.focus;

import com.google.gwt.event.dom.client.*;
import com.google.gwt.event.shared.GwtEvent;
import com.google.gwt.event.shared.HandlerManager;
import com.google.gwt.event.shared.HandlerRegistration;

public class MockFocusObservable
        implements HasFocusHandlers, HasBlurHandlers {

    private final HandlerManager manager = new HandlerManager(null);

    @Override
    public HandlerRegistration addFocusHandler(
            final FocusHandler handler) {

        manager.addHandler(
            FocusEvent.getType(),
            handler
        );

    }

    @Override
    public HandlerRegistration addBlurHandler(
            final BlurHandler handler) {

        manager.addHandler(
            BlurEvent.getType(),
            handler
        );

    }

    @Override
    public void fireEvent(
            final GwtEvent<?> event) {

        manager.fireEvent(event);

    }

}






    public Stream<FocusEvent> until(
            final Stream<?> until) {

        final HandlerRegistration registration = subject.addFocusHandler(
            new FocusHandler() {
                @Override
                public void onFocus(final FocusEvent event) {
                    pipe.put(event);
                }
            }
        );

        until.limit(1).loop(
            new Effect<Object>() {
                @Override
                public void e(final Object o) {
                    registration.removeHandler();
                }
            }
        );

        return pipe;

    }

    public Stream<FocusEvent> when(
            final Signal<Boolean> condition) {

        final Pipe<FocusEvent> pipe = Reactives.pipe();

        final Variable<Option<HandlerRegistration>> registration =
            Reactives.variable(Option.<HandlerRegistration>none());

        condition.loop(
            new Effect<Boolean>() {
                @Override
                public void e(Boolean value) {
                    if (value) {
                        registration.put(
                            Option.some(
                                subject.addFocusHandler(
                                    new FocusHandler() {
                                        @Override
                                        public void onFocus(final FocusEvent event) {
                                            pipe.put(event);
                                        }
                                    }
                                )
                            )
                        );
                    } else if (registration.get().isSome()) {
                        registration.get().some().removeHandler();
                    }
                }
            }
        );

        return pipe;

    }












package org.jreact.core.impl;

import org.jreact.core.Value;

class LazyConstant<A>
        extends ConstantImpl<A> {

    A value;
    Value<A> container;

    LazyConstant(
            final Value<A> container) {

        this.container = container;

    }

    @Override
    public A get() {

        if (value == null) {
            value = container.get();
            container = null;
        }

        return value;

    }



}







package org.jreact.core.impl;

import fj.Effect;
import fj.F;
import org.jreact.core.Signal;
import org.jreact.core.Value;

public class DisposableConstant<A>
        extends ConstantImpl<A> {

    final Value<A> value;
    boolean disposed;

    DisposableConstant(
            final Value<A> value) {

        this.value = value;

    }

    DisposableConstant(
            final Value<A> value,
            final boolean disposed) {

        this.value = value;
        this.disposed = disposed;

    }

    @Override
    public A get() {

        return value.get();

    }

    void dispose() {

        disposed = true;

    }

    @Override
    public void loop(
            final Effect<? super A> effect) {

        if (value != null) {
            super.loop(effect);
        }

    }

    @Override
    public <B> Signal<B> map(
            final F<A, B> function) {

        if (!disposed) {
            return super.map(function);
        } else {
            return new DisposableConstant<B>
        }

    }

}













package org.jreact.condition;

public abstract class LoopCondition {

    public abstract boolean check();

}











package org.jreact.effect;

import fj.Effect;
import org.A;

public class EmissionEffect<A>
        extends Effect<A> {

    private final Source<A> source;

    public EmissionEffect(
            final Source<A> source) {

        this.source = source;

    }

    @Override
    public void e(
            final A pkg) {

        source.emit(pkg);

    }

}
